using System;
using System.IdentityModel.Tokens;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Dating.API.Data;
using Dating.API.Dtos;
using Dating.API.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.IdentityModel.Tokens;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using System.Collections.Generic;

namespace Dating.API.Controllers
{
    [ApiController] // use no need to use FromBody, FromQuery, Validate the model automatic instead using ModelState object
    [Route("api/[controller]")]
    [AllowAnonymous]

    //Controller have MVC, controller base uses API
    public class AuthController : ControllerBase
    {
        
        private readonly IConfiguration _config;
        private readonly IMapper _mapper;
        private readonly UserManager<User> _userManager;
        private readonly SignInManager<User> _signInManager;

        public AuthController( IConfiguration config, IMapper mapper,
            UserManager<User> userManager, SignInManager<User> signInManager)
        {
            _mapper = mapper;
            _userManager = userManager;
            _signInManager = signInManager;
            _config = config;
            
        }

        [HttpPost("register")]

        public async Task<IActionResult> Register(UserForRegisterDto userForRegisterDto)
        {

            var userToCreate = _mapper.Map<User>(userForRegisterDto);

            var result = await _userManager.CreateAsync(userToCreate, userForRegisterDto.Password);

            var userToReturn = _mapper.Map<UserForDetailedDto>(userToCreate);
            if(result.Succeeded){
                return CreatedAtRoute("GetUser", new {controller ="Users", id = userToCreate.Id},userToReturn);
            }
            return BadRequest(result.Errors);

        }

        [HttpPost("login")]
        public async Task<IActionResult> Login(UserForLoginDto userForLoginDto)
        {
            var user = await _userManager.FindByNameAsync(userForLoginDto.Username);
            var result = await _signInManager.CheckPasswordSignInAsync(user,userForLoginDto.Password, false);

            if (result.Succeeded)
            {
                var appUser = _mapper.Map<UserForDetailedDto>(user);

                return Ok(new
                {
                    token = GenerateJWTToken(user).Result,
                    appUser
                });
            }
            return Unauthorized();

        }

        private async Task<string> GenerateJWTToken(User user){

               // JSON Web token standard RFC 7519  token for each api call validation with calling database everytime 
            // It contains three portion 1.header (typeof token, alg used to hash), 2.Payload contains user info, expiry, 3.secret or signature that generated by server

            // claims store sensitive information about the user, be careful which type of data using
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                new Claim(ClaimTypes.Name, user.UserName)
            };

            var roles = await _userManager.GetRolesAsync(user);

            foreach (var role in roles){
                claims.Add(new Claim(ClaimTypes.Role, role));
            }

            //Getting secret key from config file as bytes of symmetric key
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config.GetSection("AppSettings:Token").Value));

            //secret part of token generate with hash alg sha 512
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha512Signature);

            //Token formation
            var tokenDescription = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.Now.AddDays(1),
                SigningCredentials = creds
            };

            var tokenHandler = new JwtSecurityTokenHandler();

            //Token creation
            var token = tokenHandler.CreateToken(tokenDescription);
            return tokenHandler.WriteToken(token);
        }

    }
}